SN,API Name,API Description,P1_t,P2_t,P3_t,P4_t,P5_t,P6_t,P1 info,P2 info,P3 info,P4 info,P5 info,P6 info,Return_t,Return info
1,LMS7002M_create,"
Create an instance of the LMS7002M driver.
This call does not reset or initialize the LMS7002M.
See LMS7002M_init(...) and LMS7002M_reset(...).
",LMS7002M_spi_transact_t ,None,None,None,None,None,transact,None,None,None,None,None,LMS7002M_t*,"return a new instance of the LMS7002M driver
"
2,LMS7002M_destroy,"
Destroy an instance of the LMS7002M driver.
This call simply fees the instance data,
it does not shutdown or have any effects on the chip.
Use the LMS7002M_power_down(...) call before destroy().
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
3,LMS7002M_spi_write,"
Perform a SPI write transaction on the given device.
This call can be used directly to access SPI registers,
rather than indirectly through the high level driver calls.
",LMS7002M_t *, const int , const int ,None,None,None,self,addr,value,None,None,None,void,None
4,LMS7002M_spi_read,"
Perform a SPI read transaction on the given device.
This call can be used directly to access SPI registers,
rather than indirectly through the high level driver calls.
",LMS7002M_t *, const int ,None,None,None,None,self,addr,None,None,None,None,int,"return the 16 bit register value
"
5,LMS7002M_regs_spi_write,"
Write a spi register using values from the regs structure.
",LMS7002M_t *, const int ,None,None,None,None,self,addr,None,None,None,None,void,None
6,LMS7002M_regs_spi_read,"
Read a spi register, filling in the fields in the regs structure.
",LMS7002M_t *, const int ,None,None,None,None,self,addr,None,None,None,None,void,None
7,*LMS7002M_regs,"
Get access to the registers structure and unpacked fields.
Use LMS7002M_regs_spi_write()/LMS7002M_regs_spi_read()
to sync the fields in this structure with the device.
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,LMS7002M_regs_t,"return the pointer to the unpacked LMS7002M fields
"
8,LMS7002M_regs_to_rfic,"
Write the entire internal register cache to the RFIC.
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
9,LMS7002M_rfic_to_regs,"
Read the the entire RFIC into the internal register cache.
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
10,LMS7002M_dump_ini,"
Dump the known registers to an INI format like the one used by the EVB7 GUI.
",LMS7002M_t *, const char *,None,None,None,None,self,path,None,None,None,None,int,"return 0 for success otherwise failure
"
11,LMS7002M_load_ini,"
Load registers from an INI format like the one used by the EVB7 GUI.
",LMS7002M_t *, const char *,None,None,None,None,self,path,None,None,None,None,int,"return 0 for success otherwise failure
"
12,LMS7002M_set_spi_mode,"
Set the SPI mode (4-wire or 3-wire).
We recommend that you set this before any additional communication.
",LMS7002M_t *, const int ,None,None,None,None,self,numWires,None,None,None,None,void,None
13,LMS7002M_reset,"
Perform all soft and hard resets available.
Call this first to put the LMS7002M into a known state.
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
14,LMS7002M_reset_lml_fifo,"
Reset all logic registers and FIFO state.
Use after configuring and before streaming.
",LMS7002M_t *, const LMS7002M_dir_t ,None,None,None,None,self,direction,None,None,None,None,void,None
15,LMS7002M_power_down,"
Put all available hardware into disable/power-down mode.
Call this last before destroying the LMS7002M instance.
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
16,LMS7002M_configure_lml_port,"
Configure the muxing and clocking on a lime light port.
This sets the data mode and direction for the DIQ pins,
and selects the appropriate clock and stream muxes.
This call is not compatible with JESD207 operation.
The mclkDiv must be 1 for no divider, or an even value.
Odd divider values besides 1 (bypass) are not allowed.
",LMS7002M_t *, const LMS7002M_port_t , const LMS7002M_dir_t , const int ,None,None,self,portNo,direction,mclkDiv,None,None,void,None
17,LMS7002M_invert_fclk,"
Invert the feedback clock used with the transmit pins.
This call inverts both FCLK1 and FCLK2 (only one of which is used).
",LMS7002M_t *, const bool ,None,None,None,None,self,invert,None,None,None,None,void,None
18,LMS7002M_setup_digital_loopback,"
Enable digital loopback inside the lime light.
This call also applies the tx fifo write clock to the rx fifo.
To undo the effect of this loopback, call LMS7002M_configure_lml_port().
",LMS7002M_t *,None,None,None,None,None,self,None,None,None,None,None,void,None
19,LMS7002M_set_mac_ch,"
Set the MAC mux for channel A/B shadow registers.
This call does not incur a register write if the value is unchanged.
This call is mostly used internally by other calls that have to set the MAC.
",LMS7002M_t *, const LMS7002M_chan_t ,None,None,None,None,self,channel,None,None,None,None,void,None
20,LMS7002M_set_mac_dir,"
Set the MAC mux for direction TX/RX shadow registers.
For SXT and SXR, MAX is used for direction and not channel control.
This call does not incur a register write if the value is unchanged.
This call is mostly used internally by other calls that have to set the MAC.
",LMS7002M_t *, const LMS7002M_dir_t ,None,None,None,None,self,direction,None,None,None,None,void,None
21,LMS7002M_set_diq_mux,"
Set the DIQ mux to control CHA and CHB I and Q ordering.
",LMS7002M_t *, const LMS7002M_dir_t , const int ,None,None,None,self,direction,positions[4],None,None,None,void,None
22,LMS7002M_ldo_enable,"
Enable/disable a group of LDOs.
",LMS7002M_t *, const bool , const int ,None,None,None,self,enable,group,None,None,None,void,None
23,LMS7002M_xbuf_share_tx,"
Share the TX XBUF clock chain to the RX XBUF clock chain.
Enabled sharing when there is no clock provided to the RX input.
",LMS7002M_t *, const bool ,None,None,None,None,self,enable,None,None,None,None,void,None
24,LMS7002M_xbuf_enable_bias,"
Enable input biasing the DC voltage level for clock inputs.
When disabled, the input clocks should be DC coupled.
",LMS7002M_t *, const bool ,None,None,None,None,self,enable,None,None,None,None,void,None
25,LMS7002M_afe_enable,"
Enable/disable individual DACs and ADCs in the AFE section.
Use the direction and channel parameters to specify a DAC/DAC.
",LMS7002M_t *, const LMS7002M_dir_t , const LMS7002M_chan_t , const bool ,None,None,self,direction,channel,enable,None,None,void,None
26,LMS7002M_set_data_clock,"
Configure the ADC/DAC clocking given the reference and the desired rate.
This is a helper function that may make certain non-ideal assumptions,
for example this calculation will always make use of fractional-N tuning.
Also, this function does not directly set the clock muxing (see CGEN section).
",LMS7002M_t *, const double , const double , double *,None,None,self,fref,fout,factual,None,None,int,"return 0 for success or error code on failure
"
27,LMS7002M_set_nco_freq,"
Set the frequency for the specified NCO.
Most users should use LMS7002M_xxtsp_set_freq() to handle bypasses.
Note: there is a size 16 table for every NCO, we are just using entry 0.
Math: freqHz = freqRel * sampleRate
",LMS7002M_t *, const LMS7002M_dir_t , const LMS7002M_chan_t , const double ,None,None,self,direction,channel,freqRel,None,None,void,None
28,LMS7002M_set_gfir_taps,"
Set the filter taps for one of the TSP FIR filters.
If the taps array is NULL or the ntaps is 0,
then the specified filter will be bypassed,
otherwise, the specified filter is enabled.
An error will be returned when the taps size is incorrect,
or if a non-existent filter is selected (use 1, 2, or 3).
Filters 1 and 2 are 40 taps, while filter 3 is 120 taps.
",None,None,None,None,None,None,"param self an instance of the LMS7002M driver
","param direction the direction LMS_TX or LMS_RX
","param channel the channel LMS_CHA or LMS_CHB
","param which which FIR filter 1, 2, or 3
","param taps a pointer to an array of taps
","param ntaps the size of the taps array
",int,"return 0 for success or error code on failure
"
29,LMS7002M_sxx_enable,"
Enable/disable the synthesizer.
",LMS7002M_t *, const LMS7002M_dir_t , const bool ,None,None,None,self,direction,enable,None,None,None,void,None
30,LMS7002M_set_lo_freq,"
The simplified tuning algorithm for the RX and TX local oscillators.
Each oscillator is shared between both channels A and B.
This is a helper function that may make certain non-ideal assumptions,
for example this calculation will always make use of fractional-N tuning.
",LMS7002M_t *, const LMS7002M_dir_t , const double , const double , double *,None,self,direction,fref,fout,factual,None,int,"return 0 for success or error code on failure
"
31,LMS7002M_sxt_to_sxr,"
Share the transmit LO to the receive chain.
This is useful for TDD modes which use the same LO for Rx and Tx.
The default is disabled. Its recommended to disable SXR when using.
",LMS7002M_t *, const bool ,None,None,None,None,self,enable,None,None,None,None,void,None
32,LMS7002M_txtsp_enable,"
Initialize the TX TSP chain by:
Clearing configuration values, enabling the chain,
and bypassing IQ gain, phase, DC corrections, and filters.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
33,LMS7002M_txtsp_set_interp,"
Set the TX TSP chain interpolation.
",LMS7002M_t *, const LMS7002M_chan_t , const size_t ,None,None,None,self,channel,interp,None,None,None,void,None
34,LMS7002M_txtsp_set_freq,"
Set the TX TSP CMIX frequency.
Math: freqHz = TSPRate * sampleRate
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,freqRel,None,None,None,void,None
35,LMS7002M_txtsp_tsg_const,"
Test constant signal level for TX TSP chain.
Use LMS7002M_txtsp_enable() to restore regular mode.
",LMS7002M_t *, const LMS7002M_chan_t , const int , const int ,None,None,self,channel,valI,valQ,None,None,void,None
36,LMS7002M_txtsp_tsg_tone,"
Test tone signal for TX TSP chain (TSP clk/8).
Use LMS7002M_txtsp_enable() to restore regular mode.
",LMS7002M_t *, const LMS7002M_chan_t ,None,None,None,None,self,channel,None,None,None,None,void,None
37,LMS7002M_txtsp_set_dc_correction,"
DC offset correction value for Tx TSP chain.
Correction values are maximum 1.0 (full scale).
",None,None,None,None,None,None,"param self an instance of the LMS7002M driver
","param channel the channel LMS_CHA or LMS_CHB
","param valI the I correction value
","param valQ the Q correction value
",None,None,void,None
38,LMS7002M_txtsp_set_iq_correction,"
IQ imbalance correction value for Tx TSP chain.
- The gain is the ratio of I/Q, and should be near 1.0
- Gain values greater than 1.0 max out I and reduce Q.
- Gain values less than 1.0 max out Q and reduce I.
- A gain value of 1.0 bypasses the magnitude correction.
- A phase value of 0.0 bypasses the phase correction.
",None,None,None,None,None,None,"param self an instance of the LMS7002M driver
","param channel the channel LMS_CHA or LMS_CHB
","param phase the phase correction (radians)
","param gain the magnitude correction (I/Q ratio)
",None,None,void,None
39,LMS7002M_tbb_enable,"
Enable/disable the TX baseband.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
40,LMS7002M_tbb_set_path,"
Select the data path for the TX baseband.
Use this to select loopback and filter paths.
Calling LMS7002M_tbb_set_filter_bw() will also
set the path based on the filter bandwidth setting.
",LMS7002M_t *, const LMS7002M_chan_t , const int ,None,None,None,self,channel,path,None,None,None,void,None
41,LMS7002M_tbb_set_test_in,"
Configure the test input signal to the TX BB component.
The default is disabled (LMS7002M_TBB_TSTIN_OFF).
",LMS7002M_t *, const LMS7002M_chan_t , const int ,None,None,None,self,channel,path,None,None,None,void,None
42,LMS7002M_tbb_enable_loopback,"
Enable/disable the TX BB loopback to RBB.
",LMS7002M_t *, const LMS7002M_chan_t , const int , const bool ,None,None,self,channel,mode,swap,None,None,void,None
43,LMS7002M_tbb_set_filter_bw,"
Set the TX baseband filter bandwidth.
The actual bandwidth will be greater than or equal to the requested bandwidth.
",LMS7002M_t *, const LMS7002M_chan_t , const double , double *,None,None,self,channel,bw,bwactual,None,None,int,"return 0 for success or error code on failure
"
44,LMS7002M_trf_enable,"
Enable/disable the TX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
45,LMS7002M_trf_select_band,"
Select the TX RF band (band 1 or band 2)
",LMS7002M_t *, const LMS7002M_chan_t , const int ,None,None,None,self,channel,band,None,None,None,void,None
46,LMS7002M_trf_enable_loopback,"
Enable/disable the TX RF loopback to RFE.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
47,LMS7002M_trf_set_pad,"
Set the PAD gain (loss) for the TX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
48,LMS7002M_trf_set_loopback_pad,"
Set the PAD gain (loss) for the TX RF frontend (in RX loopback mode).
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
49,LMS7002M_rxtsp_enable,"
Initialize the RX TSP chain by:
Clearing configuration values, enabling the chain,
and bypassing IQ gain, phase, DC corrections, filters, and AGC.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
50,LMS7002M_rxtsp_set_decim,"
Set the RX TSP chain decimation.
",LMS7002M_t *, const LMS7002M_chan_t , const size_t ,None,None,None,self,channel,decim,None,None,None,void,None
51,LMS7002M_rxtsp_set_freq,"
Set the RX TSP CMIX frequency.
Math: freqHz = TSPRate * sampleRate
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,freqRel,None,None,None,void,None
52,LMS7002M_rxtsp_tsg_const,"
Test constant signal level for RX TSP chain.
Use LMS7002M_rxtsp_enable() to restore regular mode.
",LMS7002M_t *, const LMS7002M_chan_t , const int , const int ,None,None,self,channel,valI,valQ,None,None,void,None
53,LMS7002M_rxtsp_tsg_tone,"
Test tone signal for RX TSP chain (TSP clk/8).
Use LMS7002M_rxtsp_enable() to restore regular mode.
",LMS7002M_t *, const LMS7002M_chan_t ,None,None,None,None,self,channel,None,None,None,None,void,None
54,LMS7002M_rxtsp_read_rssi,"
Read the digital RSSI indicator in the Rx TSP chain.
",LMS7002M_t *, const LMS7002M_chan_t ,None,None,None,None,self,channel,None,None,None,None,uint16_t,"return the RSSI as an unsigned 16-bit number
"
55,LMS7002M_rxtsp_set_dc_correction,"
DC offset correction value for Rx TSP chain.
This subtracts out the average signal level.
",None,None,None,None,None,None,"param self an instance of the LMS7002M driver
","param channel the channel LMS_CHA or LMS_CHB
","param enabled true to enable correction
","param window average window length 0-7 (def 0)
",None,None,void,None
56,LMS7002M_rxtsp_set_iq_correction,"
IQ imbalance correction value for Rx TSP chain.
- The gain is the ratio of I/Q, and should be near 1.0
- Gain values greater than 1.0 max out I and reduce Q.
- Gain values less than 1.0 max out Q and reduce I.
- A gain value of 1.0 bypasses the magnitude correction.
- A phase value of 0.0 bypasses the phase correction.
",None,None,None,None,None,None,"param self an instance of the LMS7002M driver
","param channel the channel LMS_CHA or LMS_CHB
","param phase the phase correction (radians)
","param gain the magnitude correction (I/Q ratio)
",None,None,void,None
57,LMS7002M_rbb_enable,"
Enable/disable the RX baseband.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
58,LMS7002M_rbb_set_path,"
Select the data path for the RX baseband.
Use this to select loopback and filter paths.
Calling LMS7002M_rbb_set_filter_bw() will also
set the path based on the filter bandwidth setting.
",LMS7002M_t *, const LMS7002M_chan_t , const int ,None,None,None,self,channel,path,None,None,None,void,None
59,LMS7002M_rbb_set_test_out,"
Configure the test output signal from the RX BB component.
The default is false meaning that the RBB outputs to the ADC.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
60,LMS7002M_rbb_set_pga,"
Set the PGA gain for the RX baseband.
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
61,LMS7002M_rbb_set_filter_bw,"
Set the RX baseband filter bandwidth.
The actual bandwidth will be greater than or equal to the requested bandwidth.
",LMS7002M_t *, const LMS7002M_chan_t , const double , double *,None,None,self,channel,bw,bwactual,None,None,int,"return 0 for success or error code on failure
"
62,LMS7002M_rfe_enable,"
Enable/disable the RX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const bool ,None,None,None,self,channel,enable,None,None,None,void,None
63,LMS7002M_rfe_set_path,"
Select the active input path for the RX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const int ,None,None,None,self,channel,path,None,None,None,void,None
64,LMS7002M_rfe_set_lna,"
Set the LNA gain for the RX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
65,LMS7002M_rfe_set_loopback_lna,"
Set the LNA gain for the RX RF frontend (in TX loopback mode).
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
66,LMS7002M_rfe_set_tia,"
Set the TIA gain for the RX RF frontend.
",LMS7002M_t *, const LMS7002M_chan_t , const double ,None,None,None,self,channel,gain,None,None,None,double,"return the actual gain value in dB
"
